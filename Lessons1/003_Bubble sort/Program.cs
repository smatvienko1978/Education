// Рассмотрим вычисление времени выполнения программ на основе алгоритма сортировки пузырьком. В данном случае, число элементов 
// массива array [n] подлежащих сортировке служит мерой объема входных данных.  

// Все операторы присваивания имеют некоторое постоянное 
// время выполнения, независящие от размера входных данных.

// Операторы на строках (54) - (56) имеют время выполнения порядка O(1). Запись O(1) означает "равнозначно некой константе". 
// В соответствии с правилом сумм время выполнения этой группы операторов равно O(max(1,1,1)) = O(1).

// Поскольку операторы if и for вложены друг в друга, то оценку времени выполнения проводят от внутреннего 
// оператора к внешнему, последовательно определяя время выполнения условного оператора в каждой итерации цикла. Для оператора if
// проверка логического условия занимает время порядка O(1). Таким образом время выполнения строк (52) - (57) имеет порядок O(1).

// Группа операторов внутреннего цикла (строки (50) - (61) ). Общее времени выполнения операторов внутреннего цикла 
// рассчитывается путем суммирования времени выполнения каждой итерации цикла. Для операторов (52) - (57) степень сложности на каждой 
// итерации составляет O(1). Цикл выполняется n - i раз, по правилу произведений общее время выполнения цикла имеет порядок 
// О((n-k) * 1), что равно О((n-k)) 

// Время выполнения внешнего цикла (строки (48) - (59) ), который содержит все исполняемые операторы программы, рассчитывается путем
// суммирования времени выполнения каждой итерации внутреннего цикла и может быть выражено через сумму арифметической прогрессии:
//                                               (2*a1 + (n-1)*d) / 2 * n, 
// где a1 - первый член прогрессии, для данного случая (n-1);
//     d - разность прогрессии, для данного случая -1;
//     n - количество элементов.

// Количество элементов массива в нашем примере равно 5, степень роста сложности можно описать прогрессией:
// (n - 1) + (n - 2) + (n - 3) + (n - 4) . Согласно формуле выше, время выполнения всей программы равно: 
//                                         T(n) = (2*(n-1) + (n-1)*(-1)) / 2 * n = n^2/2 , 
// степень сложности при этом равна О(n^2).
// Таким образом, программа сортировки пузырьком выполняется за время, пропорциональное квадрату числа элементов, 
// подлежащих упорядочиванию.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lessons1
{
    class Program
    {

        static int[] Sort(int[] arr)
        {
                                                                // начальное состояние: 5 4 3 2 1

            for (int i = 0; i < arr.Length - 1; i++)            //                      4 5 3 2 1
            {                                                   //                      4 3 5 2 1
                for (int j = 0; j < arr.Length - i - 1; j++)    //                      4 3 2 5 1
                {                                               //                      4 3 2 1 5 
                    if (arr[j] > arr[j + 1])
                    {                                           //                      3 4 2 1 5
                        int buf = arr[j]; // O(1)               //                      3 2 4 1 5
                        arr[j] = arr[j + 1];  // O(1)           //                      3 2 1 4 5
                        arr[j + 1] = buf; // O(1)
                    }                                           //                      2 3 1 4 5
                }                                               //                      2 1 3 4 5 
            }
                                                                //                      1 2 3 4 5
            return arr;
        }

        static void Main(string[] args)
        {

            int[] array = new int[] { 5, 4, 3, 2, 1 }; // O(n)

            array = Sort(array); // O(1)

            for (int i = 0; i < array.Length; i++) // O(n)
            {
                Console.WriteLine(array[i]);
            }
        }
    }
}
